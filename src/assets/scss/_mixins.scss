@mixin placeholder($c:#495057) {
    &::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */
        color: $c;
        opacity: 1; /* Firefox */
    }
      
    &:-ms-input-placeholder { /* Internet Explorer 10-11 */
        color: $c;
    }
      
    &::-ms-input-placeholder { /* Microsoft Edge */
        color: $c;
    }    
}
%onfocus {
    outline: none;
    box-shadow: $shadow-focus;
}
%f-awsome {
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    display: inline-block;
    font-style: normal;
    font-variant: normal;
    text-rendering: auto;
    line-height: 1;
    font-weight: 900;
    font-family: "Font Awesome 5 Free";

}
%l-cell-spread {
    flex-grow: 1;
}
%norm-btn {
    -webkit-appearance: none;
    -moz-appearance: none;
    font: inherit;
    border: none;
    cursor: pointer;
    padding: 0;
    line-height: inherit;
    background: transparent;
}
%norm-ul {
    padding: 0;
    margin: 0;
    list-style: none;
}
%flex {
    display: flex;
}
%l-align-center {
    @extend %flex;
    align-items: center;
    justify-content: center;
    text-align: center;
}
%spread {
    position: absolute;
    height: 100%;
    width: 100%;
    top: 0;
    left: 0;
}

%stretch {
     position: absolute;
     top: -99px;
     right: -99px;
     left: -99px;
     bottom: -99px;
     margin: auto;
 }
%ff-open-sans {
    //font-family: 'Open Sans', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    font-family: 'Open Sans', Arial, sans-serif;

}

@mixin spin( $speed:1s) { 
    -webkit-animation:spin $speed linear infinite;
    animation:spin $speed linear infinite;		
    @-webkit-keyframes spin { 100% { -webkit-transform: rotate(360deg); } }
    @keyframes spin { 100% { -webkit-transform: rotate(360deg); transform:rotate(360deg); } }
}
@mixin flip() {
    -moz-transform: scaleX(-1);
    -o-transform: scaleX(-1);
    -webkit-transform: scaleX(-1);
    transform: scaleX(-1);
    filter: FlipH;
    -ms-filter: "FlipH";	
}

%flip {
    @include flip();
}
// _decimal.scss | MIT License | gist.github.com/terkel/4373420

// Round a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @param  {String} [$mode:round] (round|ceil|floor) How to round a number
// @return {Number} A rounded number
// @example
//     decimal-round(0.333)    => 0
//     decimal-round(0.333, 1) => 0.3
//     decimal-round(0.333, 2) => 0.33
//     decimal-round(0.666)    => 1
//     decimal-round(0.666, 1) => 0.7
//     decimal-round(0.666, 2) => 0.67
//
@function decimal-round ($number, $digits: 0, $mode: round) {
    $n: 1;
    // $number must be a number
    @if type-of($number) != number {
        @warn '#{ $number } is not a number.';
        @return $number;
    }
    // $digits must be a unitless number
    @if type-of($digits) != number {
        @warn '#{ $digits } is not a number.';
        @return $number;
    } @else if not unitless($digits) {
        @warn '#{ $digits } has a unit.';
        @return $number;
    }
    @for $i from 1 through $digits {
        $n: $n * 10;
    }
    @if $mode == round {
        @return round($number * $n) / $n;
    } @else if $mode == ceil {
        @return ceil($number * $n) / $n;
    } @else if $mode == floor {
        @return floor($number * $n) / $n;
    } @else {
        @warn '#{ $mode } is undefined keyword.';
        @return $number;
    }
}

// Ceil a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @return {Number} A ceiled number
// @example
//     decimal-ceil(0.333)    => 1
//     decimal-ceil(0.333, 1) => 0.4
//     decimal-ceil(0.333, 2) => 0.34
//     decimal-ceil(0.666)    => 1
//     decimal-ceil(0.666, 1) => 0.7
//     decimal-ceil(0.666, 2) => 0.67
//
@function decimal-ceil ($number, $digits: 0) {
    @return decimal-round($number, $digits, ceil);
}

// Floor a number to specified digits.
//
// @param  {Number} $number A number to round
// @param  {Number} [$digits:0] Digits to output
// @return {Number} A floored number
// @example
//     decimal-floor(0.333)    => 0
//     decimal-floor(0.333, 1) => 0.3
//     decimal-floor(0.333, 2) => 0.33
//     decimal-floor(0.666)    => 0
//     decimal-floor(0.666, 1) => 0.6
//     decimal-floor(0.666, 2) => 0.66
//
@function decimal-floor ($number, $digits: 0) {
    @return decimal-round($number, $digits, floor);
}
@function strip($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}
/*px to em: first param = parent font-size, second param = unit in pixels to be converted 
to em */
@function em($p,$v) {
	@return decimal-floor( ( (strip($v) / strip($p)) * 1em) ,2 );
} 
@function rem($fs,$rem:30) {
	@return decimal-floor( (strip($fs)/$rem*1rem),2);
}
